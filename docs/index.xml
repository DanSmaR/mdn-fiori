<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MDN Fiori</title>
    <link>https://mdn.github.io/mdn-fiori/</link>
    <description>Recent content on MDN Fiori</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://mdn.github.io/mdn-fiori/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>General Syntax</title>
      <link>https://mdn.github.io/mdn-fiori/patterns/scss/syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mdn.github.io/mdn-fiori/patterns/scss/syntax/</guid>
      <description>General  Use the .scss syntax, never the original .sass syntax Order your regular CSS and @include declarations logically (see below)  Ordering of property declarations List all standard CSS properties, followed by @include and nested selectors:
.card { display: flex; margin: 10px; @include set-font-size(18px); .title { color: $text-color; font-weight: bold; } }  Variables Prefer dash-cased variable names (e.g. $my-variable) over camelCased or snake_cased variable names
Mixins Mixins should be used to DRY up your code, add clarity, or abstract complexity.</description>
    </item>
    
    <item>
      <title>Terminology</title>
      <link>https://mdn.github.io/mdn-fiori/patterns/css/terminology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mdn.github.io/mdn-fiori/patterns/css/terminology/</guid>
      <description>Rule Declaration A rule declaration generally consist of one or more selectors, and a list of properties. For example:
.class-name { display: block; margin: 0; }  Selector A selector matches the element(s) to which the style rules will be applied. Selectors can be any combination of a class name, a HTML attribute as well as psuedo-classes and psuedo-elements. For more details on selectors, see the W3C CSS selectors specification.</description>
    </item>
    
    <item>
      <title>Colour Variables</title>
      <link>https://mdn.github.io/mdn-fiori/patterns/scss/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mdn.github.io/mdn-fiori/patterns/scss/variables/</guid>
      <description>All SCSS variables are defined in kuma/static/styles/includes/_vars.scss
Colours Base Colours   $red | #e66465
   $orange | #f69d3c
   $yellow | #f6b73c
   $green | #4d9f0c
   $blue | #3f87a6
   $purple | #9198e5
   $grey | #696969
  Lighter Base Shades   $red-light | #ffe7e8
   $orange-light | #ffe8d4
   $yellow-light | #fff3d4</description>
    </item>
    
    <item>
      <title>Spacing Variables</title>
      <link>https://mdn.github.io/mdn-fiori/patterns/scss/spacing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mdn.github.io/mdn-fiori/patterns/scss/spacing/</guid>
      <description> Spacing  $gutter-width: 24px $content-block-margin: 24px $mobile-center-spacing: 15px  </description>
    </item>
    
    <item>
      <title>-remify function</title>
      <link>https://mdn.github.io/mdn-fiori/patterns/scss/remify/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mdn.github.io/mdn-fiori/patterns/scss/remify/</guid>
      <description>The remify function converts pixel based units into rem based units. If you pass in any unit other than px, the exact same value will be returned.
@function -remify($value) { $u: unit($value); $v: 0; @if $u == &#39;px&#39; { $v: $value/$body-font-size * 1rem; } @else { $v: unit($value, u); } @return $v; }  Example font-size: -remify(16px);  This will result in the following output
font-size: 1rem;  This is currently only used internally by the set-font-size mixin.</description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>https://mdn.github.io/mdn-fiori/patterns/js/comments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mdn.github.io/mdn-fiori/patterns/js/comments/</guid>
      <description>Comments Documenting functions When documenting functions use the following convetions. Always use the /** ... */ format to wrap your comments
/** * Adds a new user to the database */ function addUser(user) { ... return status; }  Documentation for each parameter should consist of the expected type, the name, and a description of its use.
/** * Adds a new user to the database * @param {Object} user - The user to be added */ function addUser(user) { .</description>
    </item>
    
    <item>
      <title>Cupper</title>
      <link>https://mdn.github.io/mdn-fiori/print-version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mdn.github.io/mdn-fiori/print-version/</guid>
      <description>You don&amp;rsquo;t want to edit this file :-)</description>
    </item>
    
    <item>
      <title>Formatting</title>
      <link>https://mdn.github.io/mdn-fiori/patterns/css/formatting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mdn.github.io/mdn-fiori/patterns/css/formatting/</guid>
      <description>General  Use 4 spaces (no tabs) for indentation Prefer dashes over camelCasing in class names. Do not use ID selectors When using multiple selectors in a rule declarations, give each selector its own line. Put a space before the opening brace { in rule declarations In properties, put a space after, but not before, the : character. Put closing braces } of rule declarations on a new line Put blank lines between rule declarations Avoid the use of !</description>
    </item>
    
    <item>
      <title>Iconography</title>
      <link>https://mdn.github.io/mdn-fiori/patterns/css/iconography/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mdn.github.io/mdn-fiori/patterns/css/iconography/</guid>
      <description>The following is a list of icons used across MDN Web Docs. As part of each icon, the HTML used to add them to a page is included.
Website Icons {% include &amp;quot;includes/icons/facebook.svg&amp;quot; %}  {% include &amp;quot;includes/icons/github.svg&amp;quot; %}  {% include &amp;quot;includes/icons/instagram.svg&amp;quot; %}  {% include &amp;quot;includes/icons/jsfiddle.svg&amp;quot; %}  {% include &amp;quot;includes/icons/linkedin.svg&amp;quot; %}  {% include &amp;quot;includes/icons/stack-overflow.svg&amp;quot; %}  {% include &amp;quot;includes/icons/twitter.svg&amp;quot; %}  Arrows {% include &amp;quot;includes/icons/caret-down.svg&amp;quot; %}  {% include &amp;quot;includes/icons/caret-right.</description>
    </item>
    
    <item>
      <title>UI Actions</title>
      <link>https://mdn.github.io/mdn-fiori/patterns/components/actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mdn.github.io/mdn-fiori/patterns/components/actions/</guid>
      <description>Links CTA Link  Launch ↗   .cta-link { position: relative; display: inline-block; color: #333; padding: 10px 30px 10px 0; border-bottom: 2px solid; font-family: &#39;Open Sans&#39;, Helvetica Neue, sans-serif; font-size: 17px; text-align: left; text-decoration: none; box-sizing: border-box; } .cta-link:hover, .cta-link:focus { text-decoration: none; } .icon-arrow { position: absolute; top: 30%; right: 0; width: 16px; height: 16px; transition: right .2s; } .cta-link:hover .icon-arrow, .cta-link:focus .icon-arrow { right: -5px; }  Learn web development      (function() { var root = document.</description>
    </item>
    
    <item>
      <title>Whitespace</title>
      <link>https://mdn.github.io/mdn-fiori/patterns/js/whitespace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mdn.github.io/mdn-fiori/patterns/js/whitespace/</guid>
      <description>General Use soft tabs set to 4 spaces.
Sad Face function highlight() { ∙∙let header; }  Happy Face function highlight() { ∙∙∙∙let header; }  Code Blocks Place 1 space before the leading brace
Sad Face function highlight(){ ∙∙let header; }  Happy Face function highlight() { ∙∙∙∙let header; }  Control Statements Place 1 space before the opening parenthesis in control statements (if, while etc.).
Sad Face if(true) { .</description>
    </item>
    
    <item>
      <title>bidi - l10n utilities</title>
      <link>https://mdn.github.io/mdn-fiori/patterns/scss/bidi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mdn.github.io/mdn-fiori/patterns/scss/bidi/</guid>
      <description>The bidi mixins are used to declare both the LTR and RTL values for a property together and output appropriate declarations. This makes it easier to maintain the RTL version since you only have to update values in one place.
accepts: a list of lists - each list must have 3 or 4 values
A list with three properties overrides the ltr value in rtl locales
@include bidi(((float, left, right),));  Results in:</description>
    </item>
    
    <item>
      <title>set-font-size mixin</title>
      <link>https://mdn.github.io/mdn-fiori/patterns/scss/set-font-size/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mdn.github.io/mdn-fiori/patterns/scss/set-font-size/</guid>
      <description>The set-font-size mixin takes a single value. If the value&amp;rsquo;s unit of measure is pixels, it will return two versions of the font-size rule. One will use the original pixel value, and the second will be an equivalent font size using rem.
@mixin set-font-size($value) { font-size: $value; // if this is px it will be the fallback for the rem value, otherwise it will be the only declaration @if ($value !</description>
    </item>
    
  </channel>
</rss>